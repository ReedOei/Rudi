-------------------------
-- Basic combinators
-------------------------
-- Identity
-- I x -> x -- Added to core language.

N x y -> y

-- Mockingbird
M x -> x x

T x y -> y x

U x y -> y (x x y)

W x y -> x y y
-- B x y z -> x (y z)

P a b -> a (a (a b))

-- C x y z -> x z y

-------------------------
-- Booleans
-------------------------

True x y -> x
False x y -> y
If -> I

Not x -> If x False True

And x y -> If x y False
Or x y -> If x True y


-------------------------
-- Pairs
-------------------------

Pair x y z -> z x y

Left p -> p K
Right p -> p N

-------------------------
-- Numbers
-------------------------

Zero -> N
Next n x y -> x (n x y)

Plus m n -> m Next n
Times m n -> m (Plus n) Zero
Power m n -> n (Times m) (Next Zero)

-- In the article, called the "Zero Predicate"
IsZero n -> n (K False) True

PN p -> (IsZero (Right p)) (Pair Zero (Next Zero)) (Pair (Next (Left p)) (Next (Right p)))
Prev n -> Left (n PN (Pair Zero Zero))

Minus m n -> n Prev m

LessEq m n -> IsZero (Minus m n)
MoreEq m n -> LessEq n m
Less m n -> Not (MoreEq m n)
More m n -> Not (LessEq m n)

Equal m n -> And (LessEq m n) (MoreEq m n)

-------------------------
-- Y-Combinator
-------------------------

Y -> U U

-------------------------
-- Numeric Functions
-------------------------

Fact n -> If (IsZero n) (Next Zero) (Times n (Fact (Prev n)))

Div m n -> If (Less m n) Zero (Next (Div (Minus m n) n))

Mod m n -> Minus m (Times n (Div m n))

-- Whether m divides n
Divides m n -> IsZero (Mod n m)

Even n -> Divides (Next (Next Zero)) n

GCD m n -> If (IsZero n) m (GCD n (Mod m n))

-------------------------
-- Lists
-------------------------

Empty -> Pair True (M M)
Cons h t -> Pair False (Pair h t)

IsEmpty l -> Left l

Head l -> Left (Right l)
Tail l -> Right (Right l)

Many x -> Cons x (Many x)

From n -> Cons n (From (Next n))
Naturals -> From Zero

Take n l -> If (IsZero n) Empty (If (IsEmpty l) Empty (Cons (Head l) (Take (Prev n) (Tail l))))

Sum l -> If (IsEmpty l) Zero (Plus (Head l) (Sum (Tail l)))

